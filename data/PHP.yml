- type: PHP
  repo:
    - url: https://github.com/php/php-src
      des: The PHP Interpreter
      qs:
        - q: 怎么评价PHP
          x: 有效负载
        - q: How does PHP works? PHP components?
          x: Zend, Extensions, sapi, Application 如果 PHP 是一辆车，那么车的框架就是 PHP 本身，Zend 是车的引擎（发动机），Ext 下面的各种组件就是车的轮子，Sapi 可以看做是公路，车可以跑在不同类型的公路上，而一次 PHP 程序的执行就是汽车跑在公路上。因此，我们需要：性能优异的引擎 + 合适的车轮 + 正确的跑道。
        - q: PHP interpreter?
          x: PHP code -> Token -> AST -> Opcodes -> Execute Opcodes
        - q: 默认的 PHP interpreter(sapi)，使用 OPcache，使用 JIT 动态编译，这三者有什么区别？
        - q: "***How to optimize PHP? Why has PHP7 perf improved so much?***"
        - q: 几种PSR规范
          x: Code Spec(PSR1, PSR2, 内容很多，但是无须注意直接用cs-fixer即可), logging(PSR3), Autoload(PSR4)
        - q: PHP 操作指针函数
        - q: PHP 数组函数
          x: 取差集和交集 diff函数, intersect
        - q: PHP 数组回调函数
          x: array_reduce(), array_map(), array_filter(), array_walk()
        - q: PHP 排序函数
          x: sort()/rsort(), asort()/arsort()
        - q: array_search(), in_array(), array_key_exists() 的区别？
        - q: array+array 和 array_merge()？
        - q: PHP 字符串函数
          x: pos, replace, slashes, cmp, 打印输出
        - q: strtr() 和 str_replace() 的区别
          x: perf, is case sensitive
        - q: PHP 文件相关函数
        - q: php 如何保留两位小数？
        - q: php 如何返回随机小数？
        - q: 类型声明（type hint）有哪些？
        - q: PHP的OOP语法
        - q: php 自动加载的演进过程？
        - q: PHP 的异常处理？PHP有哪些预定义Exception?
          x: 错误和异常是两码事, try-catch, throwable(php7 之后才有的)
        - q: PHP 有哪些预定义接口类？
          x: Iterator, Generator, Closure, JsonSerializable, ...
        - q: PHP 闭包(Closure)
          x: use, bindTo
        - q: PHP 魔术方法
          x: 4*2 + 2*4 = 16
        - q: PHP Attributes?
        - q: PHP 预定义变量
        - q: PHP 全局变量 (全局预定义变量)
          x: $_GET, $_POST, $_COOKIE, ...
        - q: PHP 魔术常量都有哪些？
        - q: PHP 预定义常量都有哪些？
        - q: 怎么定义常量？
          x: const 和 define）Const 关键字在类内定义常量，define 在类外定义常量
        - q: public, private, protected, final, static 各自的使用场景？
        - q: “三元运算符”的几种写法？tricks写法？
          x: "($a = $a ?: 1) ($a = $a ?? 1) ($a = $a ? $a : 1) ($len = $type == 'year' ? 4 : 2;)"
        - q: instanceof
        - q: $data as &$key 是什么意思？
        - q: php的xdebug断点调试怎么搞？
          u: https://gist.github.com/hxhac/4596477bd95bd797e5cb582d5f60abf4
          x: 其实php的xdebug断点调试也很简单，pecl install xdebug之后，修改 php.ini 中ext相关配置即可

      qq:
        - topic: class
          qs:
            - q: 抽象类里可以没有抽象方法吗？
              x: 抽象类中可以没有抽象方法（全部都是普通方法），那么，抽象类和普通类的区别就在于：抽象类只能继承，不能实例化。
            - q: 抽象类和接口类的区别？
              x: 接口类是特殊的抽象类。接口类不能声明变量，只能声明常量。抽象类可以声明变量。接口类没有构造方法，抽象类可以有。接口类就是一个类的领导者，指明方向，子类必须完成他指定的方向，就是要实现什么都已经规定好了。抽象类就是把相同的抽出来了，不需要必须使用，继承的时候使用 extends 继承。
            - q: implements, extends
              x: 接口继承用 implements，抽象类继承用 extends
            - q: trait
              x: Trait 解决了 PHP 不能多继承的问题，“看起来像 interface，但是用起来像 class 的东西”
            - q: 如果两个 trait 里有同名方法或者属性怎么办？
              x: 使用 instanceof() 和 as 来解决。instanceof() 关键字用前者取代了后者，as 关键字给被取代的方法起了一个别名。

    - url: https://github.com/composer/composer
      des: PHP PKG Manager
      qs:
        - q: "**composer 自动加载原理？(有时间自己实现一下自动加载) 把 composer 包名字写到 require 里，执行 update，具体是怎么把包自动加载到 laravel 里的？能不能说一下？**"
        - q: composer.json 文件里都有什么？
        - q: PSR规范 (PSR-4)
        - q: composer SemVer
        - q: composer commands (remove/show/update/self-update/dump-autoload)
        - q: 怎么开发 Composer 包？实战
    - url: https://github.com/PHP-CS-Fixer/PHP-CS-Fixer
      des: 代码规范工具
      cmd:
        - c: php-cs-fixer fix $PWD --config=cs.php
      qs:
        - u: https://gist.github.com/hxhac/8ba0b43a6d38906c12825d5dede1e22a
          q: PHP Linters
    - url: https://github.com/phpstan/phpstan
      des: 静态检查工具Static Analysis Tool，和 cs-fixer 一样，一种是作为服务，一种是作为一个 laravel 的 composer 包。建议作为服务使用，以免影响生产环境性能，当然作为包使用更方便。如果laravel项目可以使用larastan。除此之外，其他工具还有 phplint、phpqa、grumPHP。需要注意PHP作为Dynamic-Lang，SAT工具实际上很鸡肋。
    - url: https://github.com/larastan/larastan
      cmd:
        - c: php artisan code:analyse --level=4
    - url: https://github.com/laravel/laravel
      qs:
        - q: "***How to optimize laravel?***"
        - q: laravel 里使用了哪些设计模式？
        - q: laravel 文件夹结构
        - q: laravel 的工作原理？laravel 路由加载原理？
        - q: laravel 不读某个字段？
          x: 用$hidden 属性在 model 里设置隐藏字段和安全字段
        - q: laravel 里 model 属性的隐藏，展示和临时隐藏？
          x: $hidden, $visible, 临时隐藏：return $user->makeVisible('attribute')->toArray();
        - q: laravel 的$appends 属性怎么用？
          x: appends 属性用来临时添加某个数据库里没有的字段，实现动态修改模型，使用 getColumnAttribute() 来定义字段数据
        - q: 同一个 model 使用不同 connections 连接不同数据库，使用事务时，即使报错也无法回滚，怎么处理？
          x: DB::connection('some_connection')->beginTransaction();

        - q: laravel 单元测试的文件上传？
          x: $fakeImg = UploadedFile::fake()->image('temp.jpg');
        - q: laravel 里多对多的写入和查询怎么做？
        - q: laravel 里服务容器的工作原理？
        - q: laravel 的 elq 关联关系中的 loadMissing() 和 getDirty() 方法的区别？
        - q: laravel 里多态关系的表单验证
        - q: laravel 怎么添加自定义校验规则？
          x: 在 AppServiceProvider 里通过 Validator::extend 注册自定义规则，如果规则比较复杂，也课可以通过 make:rule 生成一个对应的自定义规则类。
        - q: 为什么要用 service-container 呢？
      qq:
        - topic: service-provider
          qs:
            - q: laravel 为什么需要 service-provider
              x: register() 就是 service-provider 用来往 service-container 里注册服务的
            - q: service-provider 的加载和执行过程
            - q: service-provider 的boot(), provides() 和$defer
        - topic: facade
          qs:
            - q: facade 是什么？
            - q: facade 的工作原理？
            - q: laravel 是怎么实现 facade 的？
        - topic: queue
          qs:
            - q: 多个 laravel 同时运行时，队列互串的问题，怎么解决？
            - q: laravel 里如何限制队列执行频率和队列长度？
            - q: laravel 里队列，如何给不同的队列设置不同的 list？如何修改某个队列的 driver？
              x: 这块还要注意 trait 属性不能通过重新定义直接重写的问题，最好在构造方法里重写
            - q: 消息推送是否应该放到队列里？队列里应该放什么逻辑？
              x: 应该放耗时任务，一些逻辑无关的业务，一些错误容忍性高的业务。比如一些使用了与逻辑无关的第三方应用（比如消息推送，一次两次的失败是可以接收的；当然，一些与逻辑有关的第三方应用应该做好容错）
            - q: laravel 队列的 fail, retry, delay
      cmd:
        - c: composer dump-autoload && php artisan optimize && php artisan cache:clear && php artisan config:clear && php artisan route:clear && php artisan view:clear && php artisan api:cache && php artisan config:clear
        - c: php artisan horizon
          x: horizon是laravel提供的background job工具，用来管理laravel的MQ，支持各种MQ服务包括beanstalked、redis、RabbitMQ之类的
        - c: php artisan serve --host=局域网ip --port=
          x: 怎么把laravel服务暴露在局域网？

    - url: https://github.com/laravel/valet
      des: |
        大概是最好用的laravel开发环境部署工具，比 Vagrant 和 Homestead 之类的都更易用。实话说PHP开发环境确实挺难搞的，要弄一堆东西，如果用valet的话，就舒服很多。另外，valet除了原生支持laravel以外，还支持slim, symfony, wordpress以及Drupal, CakePHP之类很多国外比较常用的PHP框架，如果官方不支持也可以从gh搜到类似 ThinkPHP5ValetDriver 这样的driver，非常实用，可以免受各种安装PHP环境之苦。

        吐槽一下valet，不得不说虽然已经，但是使用流程仍然很别扭，最核心的问题就是，不应该用composer来安装valet（而是应该用）。可以理解为层级问题，依赖关系为php -> composer -> valet，然后需要用valet再

        需要先park再link，park本身就可以给该dir下的所有

        pecl install igbinary

        pecl install redis

        我不理解，为啥用valet提供的虚拟域名，就会报“不支持: redis”的bug，用 run启动built-in的server，就没有这个问题。有点离谱，就这个问题至少搞了1h。
      cmd:
        - c: valet park
        - c: valet link <service>
        - c: valet forget
        - c: valet paths
          x: 用来查看所有link的服务
        - c: valet log
          x: 用来查看valet日志
        - c: valet start/restart/stop/
        - c: valet uninstall
          x: 需要先用这个命令卸载valet，再在composer全局卸载

    - url: https://github.com/shivammathur/homebrew-php
      des: 这个就是valet在用的用来切换PHP版本的repo，因为homebrew对

    - url: https://github.com/dingo/api
      des: 已经EOL了。用来实现接口的路由版本管理，dingo 内置的异常处理（Http Exception）、多种认证方式、接口限流，以及最常用的 transformer
    - url: https://github.com/tymondesigns/jwt-auth
      des: JWT Token for laravel. 用来实现用户认证
      qs:
        - q: jwt 是什么？
          x: header(加密算法), payload(exp 过期时间，sub 是 jwt 的主体，通常是用户的 id), sign(保证 token 不被篡改)
        - q: 安装 jwt 以及配置
        - q: 为什么需要刷新 token？
          x: 因为设置有效期后，token 会失效，所以需要刷新 token
        - q: 怎么使用刷新 token？
        - q: 如果 jwt 被截取了，怎么办？假设一个场景，黑客抓到了用户 a 的 jwt，使用用户 a 的 jwt 进行各种操作，怎么办？
        - q: token 的验证流程？要看源码
        - q: 如果刷新 token 过期了，怎么办？
        - q: 如果 refresh token 过期，就需要用户重新登录了
        - q: 当然还可以把这个机制设计得更复杂一些，比如，Refresh Token 每次使用的时候，都更新它的过期时间，直到与它的创建时间相比，已经超过了非常长的一段时间（比如三个月），这等于是在相当长一段时间内允许 Refresh Token 自动续期。
        - q: jwt-auth 黑名单
        - q: laravel+dingo 的第三方登录
        - q: jwt 怎么实现多表多用户系统的隔离？
    - url: https://github.com/thephpleague/fractal
      des: Used To Return RESTful API Data Format(JSON). 实际上就是 dingo 默认的 transformer 层
      qs:
        - q: fractal 的基本使用？
          x: DAS>AS>JAS
        - q: 怎么直接切换 fractal 提供给我们的三种数据结构？
        - q: 如何返回自定义格式的接口？
          x: CustomSerializer


    # [一份经过时间检验的 Laravel PHPUnit 测试经验分享 | Laravel China 社区](https://learnku.com/articles/44675)
    - url: https://github.com/sebastianbergmann/phpunit
      qs:
        - q: 断言有哪几种？
        - q: "**phpunit.xml 文件说明**"
          x: 需要现在 phpunit.xml 里预定义各项配置
        - q: laravel 的 tests 文件夹的结构？
          x: tests 的两个子目录，Feature 用来功能测试，Unit 用来单元测试
        - q: "*多环境下，怎么使用对应环境的 phpunit？*"
          x: 添加 .env.dev, .env.prod 之类的env文件
        - q: 怎么模拟认证用户？
        - q: 文件上传怎么单测？
        - q: 有哪些对于 phpunit 的增强方案？
        - q: phpunit 测试覆盖率
        - q: 怎么用单元测试来测试 laravel 中间件？
    - url: https://github.com/mikeerickson/phpunit-pretty-result-printer
      des: phpunit 美化
    - url: https://github.com/mockery/mockery
      des: Mock Test For PHP
      qs:
        - q: php 有哪些 stub 库？
    - url: https://github.com/spatie/laravel-query-builder
      des: query-builder嘛
    - url: https://github.com/orchestral/testbench
      des: benchmark test for PHP
    - url: https://github.com/DarkaOnLine/L5-Swagger
      des: swagger for laravel
      cmd:
        - c: php artisan l5-swagger:generate
    - url: https://github.com/perftools/xhgui
      des: PHP的性能分析工具都不太靠谱，差不多能用的只有只有这个了，其他的blackfire、z-ray、oneapm、new-relic都不太行。xhgui是基于tideways和xhprof实现的。
    - url: https://github.com/Jiannei/lumen-api-starter
      des: 非常完善的api-starter，可以参考，不逊于我的laravel-starter
    - url: https://github.com/z-song/laravel-admin
      des: 曾经
    - url: https://github.com/jqhph/dcat-admin
    - url: https://github.com/strapi/strapi
      des: 非常好用的后台，可以理解为某种js生态下的laravel-admin，通过定义一些schema或者meta数据，通过在该平台上点击就可以生成API，也内置了low-code来生成页面，通过后台操作把二者串起来就ok了。


